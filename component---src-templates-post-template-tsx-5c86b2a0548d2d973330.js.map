{"version":3,"file":"component---src-templates-post-template-tsx-5c86b2a0548d2d973330.js","mappings":"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","sources":["webpack://vespucci95.github.io/./src/components/TwoColumnLayout/styled.ts","webpack://vespucci95.github.io/./src/components/TwoColumnLayout/index.tsx","webpack://vespucci95.github.io/./src/components/MDXRender/index.tsx","webpack://vespucci95.github.io/./src/components/PostNavigation/styled.ts","webpack://vespucci95.github.io/./src/components/PostNavigation/index.tsx","webpack://vespucci95.github.io/./src/components/Preface/styled.ts","webpack://vespucci95.github.io/./src/components/Preface/index.tsx","webpack://vespucci95.github.io/./src/utils/Utils.ts","webpack://vespucci95.github.io/./node_modules/@giscus/react/dist/index.js","webpack://vespucci95.github.io/./src/templates/post_template.tsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { MEDIA_QUERY_MAX_WIDTH } from '@/styles/Theme';\n\nexport const Wrapper = styled.div`\n    display: flex;\n    width: 100%;\n    gap: 15px;\n    @media ${MEDIA_QUERY_MAX_WIDTH} {\n        flex-direction: column;\n    }\n`;\n\nexport const LeftColumn = styled.div`\n    display: flex;\n    width: 100%;\n    max-width: calc(100% - 288px);\n    flex-direction: column;\n    @media ${MEDIA_QUERY_MAX_WIDTH} {\n        max-width: 100%;\n    }\n`;\nexport const RightColumn = styled.div`\n    display: flex;\n    min-width: 288px;\n    max-width: 288px;\n    flex-direction: column;\n    @media ${MEDIA_QUERY_MAX_WIDTH} {\n        max-width: 100%;\n    }\n`;\n","import React, { ReactNode } from 'react';\nimport * as S from './styled';\n\ntype Props = {\n    leftColumn: ReactNode;\n    rightColumn: ReactNode;\n};\n\nconst TwoColumnLayout = ({ leftColumn, rightColumn }: Props) => {\n    return (\n        <S.Wrapper>\n            <S.LeftColumn>{leftColumn}</S.LeftColumn>\n            <S.RightColumn>{rightColumn}</S.RightColumn>\n        </S.Wrapper>\n    );\n};\n\nexport default TwoColumnLayout;\n","import React, { FunctionComponent } from 'react';\nimport styled from '@emotion/styled';\n\ninterface PostContentProps {\n    html: string;\n}\n\nconst MarkdownRenderer = styled.div`\n    * {\n        line-height: 1.6;\n    }\n\n    h1,\n    h2,\n    h3,\n    h4,\n    h5,\n    h6,\n    p,\n    li {\n        color: ${({ theme }) => theme.color.black};\n    }\n\n    h1,\n    h2,\n    h3 {\n        margin-top: 1.25em;\n        line-height: 1.14;\n    }\n\n    h1 {\n        margin-bottom: 0.4em;\n        font-size: 2em;\n        font-weight: 300;\n\n        :first-child {\n            margin-top: unset;\n        }\n    }\n\n    h2 {\n        margin-bottom: 0.3em;\n        font-size: 1.8em;\n        font-weight: 300;\n\n        :first-child {\n            margin-top: unset;\n        }\n    }\n\n    h3 {\n        margin-bottom: 0.25em;\n        font-size: 1.5em;\n        font-weight: 300;\n\n        :first-child {\n            margin-top: unset;\n        }\n    }\n\n    h4 {\n        margin-bottom: 0.2em;\n        font-size: 1.375em;\n        font-weight: 300;\n    }\n\n    h5 {\n        font-size: 1.3em;\n        font-weight: 300;\n    }\n\n    h6 {\n        font-size: 1.1em;\n        font-weight: 300;\n    }\n\n    p {\n        margin-bottom: 0.825em;\n    }\n\n    ul {\n        padding-left: 2em;\n        list-style-type: '– ';\n    }\n\n    ol {\n        padding-left: 2em;\n    }\n\n    li:last-child {\n        margin-bottom: 1em;\n    }\n\n    img {\n        pointer-events: none;\n        display: block;\n        margin: 0 auto;\n        position: relative;\n    }\n\n    img::before {\n        content: '😎 이미지 휴가 중: 다녀올 때까지 기다려주세요. 🏖️🌴';\n        display: block;\n        overflow: hidden;\n        width: 100%;\n        height: 100%;\n        background: ${({ theme }) => theme.color.bg};\n        position: absolute;\n        left: 0;\n        top: 0;\n        text-align: center;\n        text-decoration: line-through;\n        color: ${({ theme }) => theme.color.gray500};\n    }\n\n    table {\n        width: 100%;\n        border: 1px solid ${({ theme }) => theme.color.black};\n        border-collapse: collapse;\n    }\n\n    th,\n    td {\n        color: ${({ theme }) => theme.color.black};\n        border: 1px solid ${({ theme }) => theme.color.black};\n    }\n\n    th {\n        padding: 4px 0;\n        font-weight: 300;\n    }\n\n    td {\n        padding: 2px 10px;\n    }\n\n    hr {\n        margin: 2.5em 0;\n    }\n\n    strong {\n        font-weight: 500;\n    }\n\n    blockquote {\n        border-left: 3px solid ${({ theme }) => theme.color.black};\n        padding-left: 6px;\n    }\n`;\n\nconst MDXRender: FunctionComponent<PostContentProps> = function ({ html }) {\n    return <MarkdownRenderer dangerouslySetInnerHTML={{ __html: html }} />;\n};\n\nexport default MDXRender;\n","import styled from '@emotion/styled';\nimport { MEDIA_QUERY_MAX_WIDTH } from '@/styles/Theme';\nexport const Container = styled.div`\n    margin-top: 4em;\n    display: flex;\n    width: 100%;\n    justify-content: space-between;\n`;\n\nexport const Wrapper = styled.div`\n    padding: 4px 8px;\n    max-width: 40%;\n    min-width: 26%;\n`;\n\nexport const Label = styled.p`\n    font-size: 0.875em;\n    margin-bottom: 0.5em;\n`;\n\nexport const Title = styled.p`\n    font-size: 0.875em;\n    margin-bottom: 10px;\n    line-height: 1.14;\n`;\n\nexport const GrayText = styled.p`\n    font-size: 0.875em;\n    font-weight: 200;\n    color: ${({ theme }) => theme.color.gray300};\n    @media ${MEDIA_QUERY_MAX_WIDTH} {\n        display: none;\n    }\n`;\n\nexport const Row = styled.div`\n    display: flex;\n    align-items: flex-end;\n    justify-content: space-between;\n`;\n","import React from 'react';\nimport * as S from './styled';\nimport { MarkdownRemark } from 'GatsbyGraphQL';\nimport { Link } from 'gatsby';\n\nconst Navigation = (post: Omit<MarkdownRemark, 'html'> & { label: string }) => {\n    return (\n        <Link to={post.fields.slug}>\n            <S.Label>{post.label}</S.Label>\n            <S.Title>{post.frontmatter.title}</S.Title>\n            <S.Row>\n                <S.GrayText>{post.frontmatter.categories}</S.GrayText>\n                <S.GrayText>{post.frontmatter.date}</S.GrayText>\n            </S.Row>\n        </Link>\n    );\n};\n\ntype Props = {\n    prevPost: MarkdownRemark | null;\n    nextPost: MarkdownRemark | null;\n};\n\nconst PostNavigation = ({ prevPost, nextPost }: Props) => {\n    return (\n        <S.Container>\n            <S.Wrapper>{nextPost && <Navigation {...nextPost} label=\"이전 포스트\" />}</S.Wrapper>\n            <S.Wrapper>{prevPost && <Navigation {...prevPost} label=\"다음 포스트\" />}</S.Wrapper>\n        </S.Container>\n    );\n};\n\nexport default PostNavigation;\n","import styled from '@emotion/styled';\nimport { Link } from 'gatsby';\n\nexport const Container = styled.div`\n    width: 100%;\n    margin-bottom: 4em;\n`;\n\nexport const Title = styled.h1`\n    margin-bottom: 0.5em;\n    font-size: 1.75em;\n    line-height: 1.14;\n    font-weight: 200;\n    color: ${({ theme }) => theme.color.black};\n`;\n\nexport const Date = styled.p`\n    font-size: 0.875em;\n    font-weight: 200;\n    color: ${({ theme }) => theme.color.gray300};\n    white-space: nowrap;\n`;\n\nexport const Body = styled.p`\n    display: flex;\n    gap: 4px;\n    flex-wrap: wrap;\n    font-size: 1em;\n    font-weight: 200;\n    color: ${({ theme }) => theme.color.gray300};\n`;\n\nexport const Row = styled.div`\n    display: flex;\n    align-items: flex-end;\n    justify-content: space-between;\n`;\n\nexport const Tag = styled(Link)``;\n","import React from 'react';\nimport * as S from './styled';\nimport { Frontmatter } from 'GatsbyGraphQL';\n\nconst Preface = ({\n    title,\n    date,\n    tags,\n    categories,\n}: Omit<Frontmatter, 'stage' | 'description'> & { tags: string[] }) => {\n    const hasHashTag = tags && tags.length > 0;\n    return (\n        <S.Container>\n            <S.Title>{title}</S.Title>\n            <S.Row>\n                <S.Body>\n                    <p>{categories}</p>\n                    {hasHashTag && ' ∣ '}\n                    {hasHashTag &&\n                        tags.map(tag => (\n                            <S.Tag key={tag} to={`/hashtag/${tag.replace('#', '')}`}>\n                                {tag}\n                            </S.Tag>\n                        ))}\n                </S.Body>\n                <S.Date>{date}</S.Date>\n            </S.Row>\n        </S.Container>\n    );\n};\n\nexport default Preface;\n","import { TAG_REGEX } from '@/constants';\n\nexport const Utils = {\n    convertHashTag(html: string) {\n        return html.replace(TAG_REGEX, val => {\n            const tagName = encodeURIComponent(`${val.trim().replace(/#/, '')}`);\n            return `<a href=\"/hashtag/${tagName}\">${val}</a>`;\n        });\n    },\n};\n","import { jsx as b } from \"react/jsx-runtime\";\nimport { useState as j, useEffect as w } from \"react\";\nfunction G({ id: e, host: i, repo: r, repoId: o, category: u, categoryId: n, mapping: s, term: a, strict: f, reactionsEnabled: d, emitMetadata: m, inputPosition: c, theme: p, lang: l, loading: g }) {\n  const [t, x] = j(!1);\n  return w(() => {\n    t || (import(\"./giscus-BNK3dBIH.js\"), x(!0));\n  }, []), t ? b(\"giscus-widget\", { id: e, host: i, repo: r, repoid: o, category: u, categoryid: n, mapping: s, term: a, strict: f, reactionsenabled: d, emitmetadata: m, inputposition: c, theme: p, lang: l, loading: g }) : null;\n}\nexport {\n  G as default\n};\n","import { graphql, PageProps } from 'gatsby';\nimport * as React from 'react';\nimport MDXRender from '@/components/MDXRender';\nimport { MarkdownRemark, MetaData } from 'GatsbyGraphQL';\nimport PostNavigation from '@/components/PostNavigation';\nimport Preface from '@/components/Preface';\nimport Seo from '@/components/Seo';\nimport { Utils } from '@/utils/Utils';\nimport Layout from '@/components/Layout';\nimport { GatsbyImage } from 'gatsby-plugin-image';\nimport TwoColumnLayout from '@/components/TwoColumnLayout';\nimport styled from '@emotion/styled';\nimport { INNER } from '@/constants';\nimport { MEDIA_QUERY_MAX_WIDTH } from '@/styles/Theme';\nimport Giscus from '@giscus/react';\n\ntype Props = {\n    giscus: MetaData;\n    post: MarkdownRemark;\n    prev: MarkdownRemark;\n    next: MarkdownRemark;\n};\n\nconst Content = styled.div`\n    padding: 10px ${INNER}px;\n`;\n\nconst Thumbnail = styled(GatsbyImage)`\n    width: 100%;\n    height: 360px;\n    border-radius: 12px;\n    margin-bottom: ${INNER * 4}px;\n`;\n\nconst TOC = styled.div`\n    position: sticky;\n    top: 40px;\n    display: flex;\n    padding: 10px ${INNER}px;\n    font-size: 0.875em;\n    font-weight: 300;\n    justify-content: center;\n\n    a {\n        color: ${({ theme }) => theme.color.gray300};\n    }\n\n    ul {\n        display: flex;\n        flex-direction: column;\n        gap: 4px;\n\n        li {\n            margin-left: 10px;\n        }\n    }\n\n    @media ${MEDIA_QUERY_MAX_WIDTH} {\n        display: none;\n    }\n`;\n\nconst PostLayout: React.FC<PageProps> = ({ data }) => {\n    const {\n        post,\n        prev,\n        next,\n        giscus: {\n            siteMetadata: { giscus },\n        },\n    } = data as Props;\n    const { thumbnail } = post.frontmatter;\n    return (\n        <Layout>\n            <TwoColumnLayout\n                leftColumn={\n                    <Content>\n                        {thumbnail ? (\n                            <Thumbnail\n                                alt={post.frontmatter.title}\n                                image={thumbnail.childImageSharp.gatsbyImageData}\n                                draggable={false}\n                            />\n                        ) : null}\n                        <Preface\n                            title={post.frontmatter.title}\n                            thumbnail={post.frontmatter.thumbnail}\n                            tags={post.fields.hashTag}\n                            date={post.frontmatter.date}\n                            categories={post.frontmatter.categories}\n                        />\n                        <div className=\"markdown\">\n                            <MDXRender html={Utils.convertHashTag(post.html)} />\n                        </div>\n                        <PostNavigation prevPost={prev} nextPost={next} />\n                        <Giscus {...giscus} />\n                    </Content>\n                }\n                rightColumn={<TOC dangerouslySetInnerHTML={{ __html: post.tableOfContents }} />}\n            />\n        </Layout>\n    );\n};\n\nexport const Head = ({\n    data,\n    pageContext,\n}: {\n    data: Props;\n    pageContext: { title: string; slug: string; nextSlug: string; prevSlug: string };\n}) => {\n    const { thumbnail } = data.post.frontmatter;\n    return <Seo title={pageContext.title} ogImageURL={thumbnail?.publicURL ?? null} />;\n};\n\nexport const query = graphql`\n    query PostDetailBySlug($slug: String, $nextSlug: String, $prevSlug: String) {\n        giscus: site {\n            siteMetadata {\n                giscus {\n                    id\n                    repo\n                    repoId\n                    category\n                    categoryId\n                    mapping\n                    strict\n                    reactionsEnabled\n                    emitMetadata\n                    inputPosition\n                    theme\n                    lang\n                }\n            }\n        }\n        post: markdownRemark(fields: { slug: { eq: $slug } }) {\n            id\n            html\n            rawMarkdownBody\n            frontmatter {\n                date(formatString: \"YYYY.MM.DD\")\n                title\n                stage\n                categories\n                description\n                thumbnail {\n                    childImageSharp {\n                        gatsbyImageData(width: 800, transformOptions: { fit: COVER })\n                    }\n                    publicURL\n                }\n            }\n            fields {\n                slug\n                hashTag\n            }\n            tableOfContents\n        }\n        prev: markdownRemark(fields: { slug: { eq: $prevSlug } }) {\n            id\n            rawMarkdownBody\n            frontmatter {\n                date(formatString: \"YYYY.MM.DD\")\n                title\n                stage\n                categories\n            }\n            fields {\n                slug\n            }\n        }\n        next: markdownRemark(fields: { slug: { eq: $nextSlug } }) {\n            id\n            rawMarkdownBody\n            frontmatter {\n                date(formatString: \"YYYY.MM.DD\")\n                title\n                stage\n                categories\n            }\n            fields {\n                slug\n            }\n        }\n    }\n`;\n\nexport default PostLayout;\n"],"names":["Wrapper","_styled","target","MEDIA_QUERY_MAX_WIDTH","LeftColumn","RightColumn","_ref","leftColumn","rightColumn","___EmotionJSX","S","MarkdownRenderer","theme","color","black","_ref2","bg","_ref3","gray500","_ref4","_ref5","_ref6","_ref7","_ref8","html","dangerouslySetInnerHTML","__html","Container","name","styles","Label","Title","GrayText","gray300","Row","Navigation","post","Link","to","fields","slug","label","frontmatter","title","categories","date","prevPost","nextPost","_extends","Date","Body","Tag","tags","hasHashTag","length","map","tag","key","replace","Utils","convertHashTag","TAG_REGEX","val","encodeURIComponent","trim","G","id","e","host","i","repo","r","repoId","o","category","u","categoryId","n","mapping","s","term","a","strict","f","reactionsEnabled","d","emitMetadata","m","inputPosition","c","p","lang","l","loading","g","t","x","repoid","categoryid","reactionsenabled","emitmetadata","inputposition","Content","INNER","Thumbnail","GatsbyImage","TOC","Head","_thumbnail$publicURL","data","pageContext","thumbnail","Seo","ogImageURL","publicURL","prev","next","giscus","siteMetadata","Layout","TwoColumnLayout","alt","image","childImageSharp","gatsbyImageData","draggable","Preface","hashTag","className","MDXRender","PostNavigation","Giscus","tableOfContents"],"sourceRoot":""}