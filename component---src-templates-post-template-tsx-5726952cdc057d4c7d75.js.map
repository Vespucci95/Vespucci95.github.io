{"version":3,"file":"component---src-templates-post-template-tsx-5726952cdc057d4c7d75.js","mappings":"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","sources":["webpack://vespucci95.github.io/./src/components/TwoColumnLayout/styled.ts","webpack://vespucci95.github.io/./src/components/TwoColumnLayout/index.tsx","webpack://vespucci95.github.io/./src/components/MDXRender/index.tsx","webpack://vespucci95.github.io/./src/components/PostNavigation/styled.ts","webpack://vespucci95.github.io/./src/components/PostNavigation/index.tsx","webpack://vespucci95.github.io/./src/components/Preface/styled.ts","webpack://vespucci95.github.io/./src/components/Preface/index.tsx","webpack://vespucci95.github.io/./src/utils/Utils.ts","webpack://vespucci95.github.io/./src/utils/HashTag.ts","webpack://vespucci95.github.io/./src/templates/post_template.tsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { MEDIA_QUERY_MAX_WIDTH } from '@/styles/Theme';\n\nexport const Wrapper = styled.div`\n    display: flex;\n    width: 100%;\n    gap: 15px;\n    @media ${MEDIA_QUERY_MAX_WIDTH} {\n        flex-direction: column;\n    }\n`;\n\nexport const LeftColumn = styled.div`\n    display: flex;\n    width: 100%;\n    flex-direction: column;\n`;\nexport const RightColumn = styled.div`\n    display: flex;\n    min-width: 288px;\n    max-width: 288px;\n    flex-direction: column;\n    @media ${MEDIA_QUERY_MAX_WIDTH} {\n        max-width: 100%;\n    }\n`;\n","import React, { ReactNode } from 'react';\nimport * as S from './styled';\n\ntype Props = {\n    leftColumn: ReactNode;\n    rightColumn: ReactNode;\n};\n\nconst TwoColumnLayout = ({ leftColumn, rightColumn }: Props) => {\n    return (\n        <S.Wrapper>\n            <S.LeftColumn>{leftColumn}</S.LeftColumn>\n            <S.RightColumn>{rightColumn}</S.RightColumn>\n        </S.Wrapper>\n    );\n};\n\nexport default TwoColumnLayout;\n","import React, { FunctionComponent } from 'react';\nimport styled from '@emotion/styled';\n\ninterface PostContentProps {\n    html: string;\n}\n\nconst MarkdownRenderer = styled.div`\n    * {\n        line-height: 1.6;\n    }\n\n    h1,\n    h2,\n    h3,\n    h4,\n    h5,\n    h6,\n    p,\n    li {\n        color: ${({ theme }) => theme.color.black};\n    }\n\n    h1,\n    h2,\n    h3 {\n        margin-top: 1.25em;\n        line-height: 1.14;\n    }\n\n    h1 {\n        margin-bottom: 0.4em;\n        font-size: 2em;\n        font-weight: 300;\n        :first-child {\n            margin-top: unset;\n        }\n    }\n    h2 {\n        margin-bottom: 0.3em;\n        font-size: 1.8em;\n        font-weight: 300;\n        :first-child {\n            margin-top: unset;\n        }\n    }\n    h3 {\n        margin-bottom: 0.25em;\n        font-size: 1.5em;\n        font-weight: 300;\n        :first-child {\n            margin-top: unset;\n        }\n    }\n    h4 {\n        margin-bottom: 0.2em;\n        font-size: 1.375em;\n        font-weight: 300;\n    }\n    h5 {\n        font-size: 1.3em;\n        font-weight: 300;\n    }\n    h6 {\n        font-size: 1.1em;\n        font-weight: 300;\n    }\n    ul {\n        padding-left: 2em;\n        list-style-type: '– ';\n    }\n    ol {\n        padding-left: 2em;\n    }\n    img {\n        pointer-events: none;\n        display: block;\n        margin: 0 auto;\n        position: relative;\n    }\n    img::before {\n        content: '😎 이미지 휴가 중: 다녀올 때까지 기다려주세요. 🏖️🌴';\n        display: block;\n        overflow: hidden;\n        width: 100%;\n        height: 100%;\n        background: ${({ theme }) => theme.color.bg};\n        position: absolute;\n        left: 0;\n        top: 0;\n        text-align: center;\n        text-decoration: line-through;\n        color: ${({ theme }) => theme.color.gray500};\n    }\n\n    table {\n        width: 100%;\n        border: 1px solid ${({ theme }) => theme.color.black};\n        border-collapse: collapse;\n    }\n\n    th,\n    td {\n        color: ${({ theme }) => theme.color.black};\n        border: 1px solid ${({ theme }) => theme.color.black};\n    }\n\n    th {\n        padding: 4px 0;\n        font-weight: 300;\n    }\n\n    td {\n        padding: 2px 10px;\n    }\n\n    hr {\n        margin: 2.5em 0;\n    }\n`;\n\nconst MDXRender: FunctionComponent<PostContentProps> = function ({ html }) {\n    return <MarkdownRenderer dangerouslySetInnerHTML={{ __html: html }} />;\n};\n\nexport default MDXRender;\n","import styled from '@emotion/styled';\nimport { MEDIA_QUERY_MAX_WIDTH } from '@/styles/Theme';\nexport const Container = styled.div`\n    margin-top: 4em;\n    display: flex;\n    width: 100%;\n    justify-content: space-between;\n`;\n\nexport const Wrapper = styled.div`\n    padding: 4px 8px;\n    max-width: 40%;\n    min-width: 26%;\n`;\n\nexport const Label = styled.p`\n    font-size: 0.875em;\n    margin-bottom: 0.5em;\n`;\n\nexport const Title = styled.p`\n    font-size: 0.875em;\n    margin-bottom: 10px;\n    line-height: 1.14;\n`;\n\nexport const GrayText = styled.p`\n    font-size: 0.875em;\n    font-weight: 200;\n    color: ${({ theme }) => theme.color.gray300};\n    @media ${MEDIA_QUERY_MAX_WIDTH} {\n        display: none;\n    }\n`;\n\nexport const Row = styled.div`\n    display: flex;\n    align-items: flex-end;\n    justify-content: space-between;\n`;\n","import React from 'react';\nimport * as S from './styled';\nimport { MarkdownRemark } from 'GatsbyGraphQL';\nimport { Link } from 'gatsby';\n\nconst Navigation = (post: Omit<MarkdownRemark, 'html'> & { label: string }) => {\n    return (\n        <Link to={post.fields.slug}>\n            <S.Label>{post.label}</S.Label>\n            <S.Title>{post.frontmatter.title}</S.Title>\n            <S.Row>\n                <S.GrayText>{post.frontmatter.categories}</S.GrayText>\n                <S.GrayText>{post.frontmatter.date}</S.GrayText>\n            </S.Row>\n        </Link>\n    );\n};\n\ntype Props = {\n    prevPost: MarkdownRemark | null;\n    nextPost: MarkdownRemark | null;\n};\n\nconst PostNavigation = ({ prevPost, nextPost }: Props) => {\n    return (\n        <S.Container>\n            <S.Wrapper>{nextPost && <Navigation {...nextPost} label=\"이전 포스트\" />}</S.Wrapper>\n            <S.Wrapper>{prevPost && <Navigation {...prevPost} label=\"다음 포스트\" />}</S.Wrapper>\n        </S.Container>\n    );\n};\n\nexport default PostNavigation;\n","import styled from '@emotion/styled';\nimport { Link } from 'gatsby';\n\nexport const Container = styled.div`\n    width: 100%;\n    margin-bottom: 4em;\n`;\n\nexport const Title = styled.h1`\n    margin-bottom: 0.5em;\n    font-size: 1.75em;\n    line-height: 1.14;\n    font-weight: 200;\n    color: ${({ theme }) => theme.color.black};\n`;\n\nexport const Date = styled.p`\n    font-size: 0.875em;\n    font-weight: 200;\n    color: ${({ theme }) => theme.color.gray300};\n    white-space: nowrap;\n`;\n\nexport const Category = styled.p`\n    font-size: 1em;\n    font-weight: 200;\n    color: ${({ theme }) => theme.color.gray300};\n`;\n\nexport const Row = styled.div`\n    display: flex;\n    align-items: flex-end;\n    justify-content: space-between;\n`;\n\nexport const Tag = styled(Link)``;\n","import React from 'react';\nimport * as S from './styled';\nimport { Frontmatter } from 'GatsbyGraphQL';\n\nconst Preface = ({ title, date, tags, categories }: Omit<Frontmatter, 'stage' | 'description'>) => {\n    return (\n        <S.Container>\n            <S.Title>{title}</S.Title>\n            <S.Row>\n                <S.Category>\n                    {categories}\n                    {tags && tags.length > 0 ? ' ∣ ' + tags.join(', ') : null}\n                </S.Category>\n                <S.Date>{date}</S.Date>\n            </S.Row>\n        </S.Container>\n    );\n};\n\nexport default Preface;\n","import { HashTag } from '@/utils/HashTag';\n\nexport const Utils = {\n    HashTag: new HashTag(),\n};\n","export class HashTag {\n    regex = /#[A-Za-z0-9가-힣]+/gm;\n    create(html: string) {\n        return html.replace(this.regex, val => {\n            const tagName = encodeURIComponent(`${val.replace(/#/, '')}`);\n            return `<a href=\"/hashtag/${tagName}\">${val}</a>`;\n        });\n    }\n}\n","import { graphql, PageProps } from 'gatsby';\nimport * as React from 'react';\n\nimport MDXRender from '@/components/MDXRender';\nimport { MarkdownRemark } from 'GatsbyGraphQL';\nimport PostNavigation from '@/components/PostNavigation';\nimport Preface from '@/components/Preface';\nimport Seo from '@/components/Seo';\nimport { Utils } from '@/utils/Utils';\nimport Layout from '@/components/Layout';\nimport { GatsbyImage } from 'gatsby-plugin-image';\nimport TwoColumnLayout from '@/components/TwoColumnLayout';\nimport styled from '@emotion/styled';\nimport { INNER } from '@/constants';\nimport { MEDIA_QUERY_MAX_WIDTH } from '@/styles/Theme';\n\ntype Props = {\n    post: MarkdownRemark;\n    prev: MarkdownRemark;\n    next: MarkdownRemark;\n};\n\nconst Content = styled.div`\n    padding: 10px ${INNER}px;\n`;\n\nconst Thumbnail = styled(GatsbyImage)`\n    width: 100%;\n    height: 360px;\n    border-radius: 12px;\n    margin-bottom: ${INNER * 4}px;\n`;\n\nconst TOC = styled.div`\n    position: sticky;\n    top: 40px;\n    display: flex;\n    padding: 10px ${INNER}px;\n    font-size: 0.875em;\n    font-weight: 300;\n    justify-content: center;\n    a {\n        color: ${({ theme }) => theme.color.gray300};\n    }\n    ul {\n        display: flex;\n        flex-direction: column;\n        gap: 4px;\n        li {\n            margin-left: 10px;\n        }\n    }\n    @media ${MEDIA_QUERY_MAX_WIDTH} {\n        display: none;\n    }\n`;\n\nconst PostLayout: React.FC<PageProps> = ({ data }) => {\n    const { post, prev, next } = data as Props;\n    const result = Utils.HashTag.create(post.html);\n    const { thumbnail } = post.frontmatter;\n    return (\n        <Layout>\n            <TwoColumnLayout\n                leftColumn={\n                    <Content>\n                        {thumbnail ? (\n                            <Thumbnail\n                                alt={post.frontmatter.title}\n                                image={thumbnail.childImageSharp.gatsbyImageData}\n                                draggable={false}\n                            />\n                        ) : null}\n                        <Preface\n                            title={post.frontmatter.title}\n                            thumbnail={post.frontmatter.thumbnail}\n                            tags={post.fields.hashTag}\n                            date={post.frontmatter.date}\n                            categories={post.frontmatter.categories}\n                        />\n                        <div className=\"markdown\">\n                            <MDXRender html={result} />\n                        </div>\n                        <PostNavigation prevPost={prev} nextPost={next} />\n                    </Content>\n                }\n                rightColumn={<TOC dangerouslySetInnerHTML={{ __html: post.tableOfContents }} />}\n            />\n        </Layout>\n    );\n};\n\nexport const Head = ({\n    pageContext,\n}: {\n    pageContext: { title: string; slug: string; nextSlug: string; prevSlug: string };\n}) => {\n    return <Seo title={pageContext.title} />;\n};\n\nexport const query = graphql`\n    query PostDetailBySlug($slug: String, $nextSlug: String, $prevSlug: String) {\n        post: markdownRemark(fields: { slug: { eq: $slug } }) {\n            id\n            html\n            rawMarkdownBody\n            frontmatter {\n                date(formatString: \"YYYY.MM.DD\")\n                title\n                tags\n                stage\n                categories\n                description\n                thumbnail {\n                    childImageSharp {\n                        gatsbyImageData(width: 800)\n                    }\n                }\n            }\n            fields {\n                slug\n                hashTag\n            }\n            tableOfContents\n        }\n        prev: markdownRemark(fields: { slug: { eq: $prevSlug } }) {\n            id\n            rawMarkdownBody\n            frontmatter {\n                date(formatString: \"YYYY.MM.DD\")\n                title\n                tags\n                stage\n                categories\n            }\n            fields {\n                slug\n            }\n        }\n        next: markdownRemark(fields: { slug: { eq: $nextSlug } }) {\n            id\n            rawMarkdownBody\n            frontmatter {\n                date(formatString: \"YYYY.MM.DD\")\n                title\n                tags\n                stage\n                categories\n            }\n            fields {\n                slug\n            }\n        }\n    }\n`;\n\nexport default PostLayout;\n"],"names":["Wrapper","_styled","target","MEDIA_QUERY_MAX_WIDTH","LeftColumn","name","styles","RightColumn","_ref","leftColumn","rightColumn","___EmotionJSX","S","MarkdownRenderer","theme","color","black","_ref2","bg","_ref3","gray500","_ref4","_ref5","_ref6","_ref7","html","dangerouslySetInnerHTML","__html","Container","Label","Title","GrayText","gray300","Row","Navigation","post","Link","to","fields","slug","label","frontmatter","title","categories","date","prevPost","nextPost","_extends","Date","Category","tags","length","join","Utils","HashTag","regex","prototype","create","replace","this","val","encodeURIComponent","Content","INNER","Thumbnail","GatsbyImage","TOC","Head","pageContext","Seo","data","prev","next","result","thumbnail","Layout","TwoColumnLayout","alt","image","childImageSharp","gatsbyImageData","draggable","Preface","hashTag","className","MDXRender","PostNavigation","tableOfContents"],"sourceRoot":""}