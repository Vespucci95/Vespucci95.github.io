{"componentChunkName":"component---src-templates-post-template-tsx","path":"/2024/1/","result":{"data":{"giscus":{"siteMetadata":{"giscus":{"id":"comments","repo":"Vespucci95/Vespucci95.github.io","repoId":"R_kgDOJ7OqQA","category":"Comments","categoryId":"DIC_kwDOJ7OqQM4CYj8Y","mapping":"pathname","strict":"0","reactionsEnabled":"1","emitMetadata":"0","inputPosition":"bottom","theme":"light_tritanopia","lang":"ko","loading":"lazy"}}},"post":{"id":"9a61dd23-0177-572f-8589-3e2d791b5d13","html":"<h1 id=\"테스트-글-입니다\" style=\"position:relative;\"><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EA%B8%80-%EC%9E%85%EB%8B%88%EB%8B%A4\" aria-label=\"테스트 글 입니다 permalink\" class=\"post-toc before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>테스트 글 입니다.</h1>\n<h1 id=\"아이템-1-타입스크립트와-자바스크립트의-관계-이해하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-1-%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%99%80-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-%EA%B4%80%EA%B3%84-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\" aria-label=\"아이템 1 타입스크립트와 자바스크립트의 관계 이해하기 permalink\" class=\"post-toc before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 1 타입스크립트와 자바스크립트의 관계 이해하기</h1>\n<blockquote>\n<p>타입스크립트는 자바스크립트의 상위 집합이다.\n모든 자바스크립트 프로그램은 이미 타입스크립트 프로그램이다.\n반대로 타입스크립트는 별도의 문법을 가지고 있기 때문에 유효한 자바스크립트 프로그램이 아니다.</p>\n</blockquote>\n<p>main.js 를 main.ts 로 바꾼다고 해서 달라지는 것은 없다.\n하지만 그 반대의 경우는 성립하지 않는다.</p>\n<blockquote>\n<p>타입스크립트는 런타임 오류를 발생시키는 코드를 찾아내려고 한다.\n그러나 모든 오류를 찾아내리라 기대하면 안된다.\n타입 체커를 통과하면서도 런타입 오류를 발생시키는 코드는 충분히 존재할 수 있다.</p>\n</blockquote>\n<blockquote>\n<p>타입스크립트 타입 시스템은 전반적으로 자바스크립트 동작을 모델링한다.\n그러나 잘못된 매개변수 개수로 함수를 호출하는 경우처럼,\n자바스크립트에서는 허용되지만 타입스크립트에서는 문제가 되는 경우도 있다.\n이러한 문법의 엄격함은 온전히 취향 차이이며 우열을 가릴 수 없는 문제다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> x <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token string\">'3'</span> <span class=\"token comment\">// OK, type is string  </span>\n<span class=\"token keyword\">const</span> y <span class=\"token operator\">=</span> <span class=\"token string\">'2'</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span> <span class=\"token comment\">// OK, type is string</span></code></pre></div>\n<p>#타입체커 는 정상으로 본다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">+</span> <span class=\"token number\">7</span> <span class=\"token comment\">// Evaluates to 7 in JS  </span>\n<span class=\"token comment\">// ~~~~ Operator '+' cannot be applied to types ...  </span>\n<span class=\"token keyword\">const</span> b <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">12</span> <span class=\"token comment\">// Evaluates to '12' in JS  </span>\n<span class=\"token comment\">// ~~~~~~~ Operator '+' cannot be applied to types ...  </span>\n<span class=\"token function\">alert</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'TypeScript'</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// alerts \"Hello\"  </span>\n<span class=\"token comment\">// ~~~~~~~~~~~~ Expected 0-1 arguments, but got 2  </span></code></pre></div>\n<p>반대로 위 예제는 오류를 표시한다.\n런타임 오류가 발생하지 않지만, 타입 체커는 문제점을 표시한다.</p>\n<h1 id=\"아이템-2-타입스크립트-설정-이해하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-2-%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%84%A4%EC%A0%95-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\" aria-label=\"아이템 2 타입스크립트 설정 이해하기 permalink\" class=\"post-toc before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 2 타입스크립트 설정 이해하기</h1>\n<blockquote>\n<p>타입스크립트 설정은 커맨드라인보다는 <code class=\"language-text\">tsconfig.json</code>을 사용하자.</p>\n</blockquote>\n<blockquote>\n<p>자바스크립트 > 타입스크립트로 전환하는게 아니라면 <code class=\"language-text\">noImplicitAny</code> 를 설정하자.</p>\n</blockquote>\n<blockquote>\n<p><code class=\"language-text\">noImplicitAny</code>, <code class=\"language-text\">strictNullChecks</code>, <code class=\"language-text\">strict</code>를 설정하는 것이 좋다.</p>\n</blockquote>\n<h1 id=\"아이템-3-코드-생성과-타입이-관계없음을-이해하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-3-%EC%BD%94%EB%93%9C-%EC%83%9D%EC%84%B1%EA%B3%BC-%ED%83%80%EC%9E%85%EC%9D%B4-%EA%B4%80%EA%B3%84%EC%97%86%EC%9D%8C%EC%9D%84-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\" aria-label=\"아이템 3 코드 생성과 타입이 관계없음을 이해하기 permalink\" class=\"post-toc before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 3 코드 생성과 타입이 관계없음을 이해하기</h1>\n<blockquote>\n<p>코드 생성은 타입 시스템과 무관하다.\n타입스크립트 타입은 런타임 동작이나 성능에 영향을 주지 않는다.</p>\n</blockquote>\n<p>타입스크립트 컴파일러는 두 가지 역할을 수행한다.</p>\n<ul>\n<li>최신 타입스크립트/자바스크립트를 브라우저에서 동작할 수 있도록 구버전의 자바스크립트로 트랜스파일(transfile)</li>\n<li>코드의 타입 오류를 체크</li>\n</ul>\n<blockquote>\n<p>타입 오류가 존재하더라도 코드 생성(컴파일)은 가능하다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token string\">'hello'</span>  \nx <span class=\"token operator\">=</span> <span class=\"token number\">1234</span>  <span class=\"token comment\">// '1234' 형식은 'string' 형식에 할당할 수 없습니다.</span></code></pre></div>\n<p>타입 오류가 발생해도 컴파일 된다.</p>\n<blockquote>\n<p>타입스크립트 타입은 런타임에 사용할 수 없다.\n런타임에 타입을 지정하려면, 타입 정보 유지를 위한 별도의 방법이 필요하다.</p>\n</blockquote>\n<ol>\n<li>height 속성이 존재하는지 체크</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Square</span> <span class=\"token punctuation\">{</span>  \n  width<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>  \n<span class=\"token punctuation\">}</span>  \n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Square</span> <span class=\"token punctuation\">{</span>  \n  height<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>  \n<span class=\"token punctuation\">}</span>  \n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Shape</span> <span class=\"token operator\">=</span> Square <span class=\"token operator\">|</span> Rectangle  \n<span class=\"token keyword\">function</span> <span class=\"token function\">calculateArea</span><span class=\"token punctuation\">(</span>shape<span class=\"token operator\">:</span> Shape<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'height'</span> <span class=\"token keyword\">in</span> shape<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    shape <span class=\"token comment\">// Type is Rectangle  </span>\n    <span class=\"token keyword\">return</span> shape<span class=\"token punctuation\">.</span>width <span class=\"token operator\">*</span> shape<span class=\"token punctuation\">.</span>height  \n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>  \n    shape <span class=\"token comment\">// Type is Square  </span>\n    <span class=\"token keyword\">return</span> shape<span class=\"token punctuation\">.</span>width <span class=\"token operator\">*</span> shape<span class=\"token punctuation\">.</span>width  \n  <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"2\">\n<li>\b접근 가능한 타입 정보를 명시적으로 저장하는 ‘태그’ 기법</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Square</span> <span class=\"token punctuation\">{</span>  \n  kind<span class=\"token operator\">:</span> <span class=\"token string\">'square'</span>  \n  width<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>  \n<span class=\"token punctuation\">}</span>  \n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token punctuation\">{</span>  \n  kind<span class=\"token operator\">:</span> <span class=\"token string\">'rectangle'</span>  \n  height<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>  \n  width<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span>  \n<span class=\"token punctuation\">}</span>  \n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Shape</span> <span class=\"token operator\">=</span> Square <span class=\"token operator\">|</span> Rectangle   <span class=\"token comment\">// 태그된 유니온(tagged union)</span>\n  \n<span class=\"token keyword\">function</span> <span class=\"token function\">calculateArea</span><span class=\"token punctuation\">(</span>shape<span class=\"token operator\">:</span> Shape<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shape<span class=\"token punctuation\">.</span>kind <span class=\"token operator\">===</span> <span class=\"token string\">'rectangle'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    shape <span class=\"token comment\">// Type is Rectangle  </span>\n    <span class=\"token keyword\">return</span> shape<span class=\"token punctuation\">.</span>width <span class=\"token operator\">*</span> shape<span class=\"token punctuation\">.</span>height  \n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>  \n    shape <span class=\"token comment\">// Type is Square  </span>\n    <span class=\"token keyword\">return</span> shape<span class=\"token punctuation\">.</span>width <span class=\"token operator\">*</span> shape<span class=\"token punctuation\">.</span>width  \n  <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"3\">\n<li>\b타입을 클래스로 만드는 방법</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Square</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">public</span> width<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span>  \n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Square</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">public</span> width<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">public</span> height<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">)</span>  \n  <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span>  \n<span class=\"token keyword\">type</span> <span class=\"token class-name\">Shape</span> <span class=\"token operator\">=</span> Square <span class=\"token operator\">|</span> Rectangle  <span class=\"token comment\">// Rectangle은 타입으로 참조</span>\n  \n<span class=\"token keyword\">function</span> <span class=\"token function\">calculateArea</span><span class=\"token punctuation\">(</span>shape<span class=\"token operator\">:</span> Shape<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>shape <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\">// 값으로 참조</span>\n    shape <span class=\"token comment\">// Type is Rectangle  </span>\n    <span class=\"token keyword\">return</span> shape<span class=\"token punctuation\">.</span>width <span class=\"token operator\">*</span> shape<span class=\"token punctuation\">.</span>height  \n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>  \n    shape <span class=\"token comment\">// Type is Square  </span>\n    <span class=\"token keyword\">return</span> shape<span class=\"token punctuation\">.</span>width <span class=\"token operator\">*</span> shape<span class=\"token punctuation\">.</span>width <span class=\"token comment\">// OK  </span>\n  <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<h1 id=\"아이템-4-구조적-타이핑에-익숙해지기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-4-%EA%B5%AC%EC%A1%B0%EC%A0%81-%ED%83%80%EC%9D%B4%ED%95%91%EC%97%90-%EC%9D%B5%EC%88%99%ED%95%B4%EC%A7%80%EA%B8%B0\" aria-label=\"아이템 4 구조적 타이핑에 익숙해지기 permalink\" class=\"post-toc before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 4 구조적 타이핑에 익숙해지기</h1>\n<blockquote>\n<p>자바스크립트가 덕 타이핑 기반이고 타입스크립트가 이를 모델링하기 위해 구조적 타이핑을 사용함을 이해해야 한다.</p>\n</blockquote>\n<p>자바스크립트는 런타임에 타입을 체크하고,\n타입스크립트는 컴파일 타입에 구조에 기반하여 타입을 체크한다.</p>\n<blockquote>\n<p>클래스 역시 구조적 타이핑 규칙을 따른다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">class</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span> <span class=\"token punctuation\">{</span>  \n  foo<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>  \n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span>foo<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>foo <span class=\"token operator\">=</span> foo  \n  <span class=\"token punctuation\">}</span>  \n<span class=\"token punctuation\">}</span>  \n<span class=\"token comment\">// 클래스를 값으로 사용</span>\n<span class=\"token keyword\">const</span> c <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\"><span class=\"token constant\">C</span></span><span class=\"token punctuation\">(</span><span class=\"token string\">'instance of C'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 클래스를 타입으로 사용</span>\n<span class=\"token keyword\">const</span> d<span class=\"token operator\">:</span> <span class=\"token constant\">C</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> foo<span class=\"token operator\">:</span> <span class=\"token string\">'object literal'</span> <span class=\"token punctuation\">}</span> <span class=\"token comment\">// OK!   </span></code></pre></div>\n<blockquote>\n<p>구조적 타이핑을 사용하면 유닛 테스팅을 손쉽게 할 수 있다.</p>\n</blockquote>\n<p>예를 들어 PostgressDB가 DB 인터페이스를 구현하는지 명확히 선언할 필요가 없다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">PostgresDB</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token function-variable function\">runQuery</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>sql<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>  \n<span class=\"token punctuation\">}</span>  \n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Author</span> <span class=\"token punctuation\">{</span>  \n  first<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>  \n  last<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span>  \n<span class=\"token punctuation\">}</span>  \n<span class=\"token keyword\">interface</span> <span class=\"token class-name\"><span class=\"token constant\">DB</span></span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token function-variable function\">runQuery</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>sql<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token builtin\">any</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>  \n<span class=\"token punctuation\">}</span>  \n<span class=\"token keyword\">function</span> <span class=\"token function\">getAuthors</span><span class=\"token punctuation\">(</span>database<span class=\"token operator\">:</span> <span class=\"token constant\">DB</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Author<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token keyword\">const</span> authorRows <span class=\"token operator\">=</span> database<span class=\"token punctuation\">.</span><span class=\"token function\">runQuery</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">SELECT FIRST, LAST FROM AUTHORS</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>  \n  <span class=\"token keyword\">return</span> authorRows<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>row <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> first<span class=\"token operator\">:</span> row<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> last<span class=\"token operator\">:</span> row<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token function\">test</span><span class=\"token punctuation\">(</span><span class=\"token string\">'getAuthors'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token keyword\">const</span> authors <span class=\"token operator\">=</span> <span class=\"token function\">getAuthors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>  \n    <span class=\"token function\">runQuery</span><span class=\"token punctuation\">(</span>sql<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span>  \n        <span class=\"token punctuation\">[</span><span class=\"token string\">'Toni'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Morrison'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>  \n        <span class=\"token punctuation\">[</span><span class=\"token string\">'Maya'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Angelou'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>  \n      <span class=\"token punctuation\">]</span>  \n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>  \n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>  \n  <span class=\"token function\">expect</span><span class=\"token punctuation\">(</span>authors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">toEqual</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>  \n    <span class=\"token punctuation\">{</span> first<span class=\"token operator\">:</span> <span class=\"token string\">'Toni'</span><span class=\"token punctuation\">,</span> last<span class=\"token operator\">:</span> <span class=\"token string\">'Morrison'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>  \n    <span class=\"token punctuation\">{</span> first<span class=\"token operator\">:</span> <span class=\"token string\">'Maya'</span><span class=\"token punctuation\">,</span> last<span class=\"token operator\">:</span> <span class=\"token string\">'Angelou'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>  \n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>  \n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h1 id=\"아이템-5-any-타입-지양하기\" style=\"position:relative;\"><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-5-any-%ED%83%80%EC%9E%85-%EC%A7%80%EC%96%91%ED%95%98%EA%B8%B0\" aria-label=\"아이템 5 any 타입 지양하기 permalink\" class=\"post-toc before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>아이템 5 any 타입 지양하기</h1>\n<blockquote>\n<p>any 타입을 사용하면 타입 체커와 타입스크립트 언어 서비스를 무력화한다.\nany 타입은 문제를 감추며, DX를 나쁘게하며, 타입 시스템의 신뢰도를 떨어뜨린다.</p>\n</blockquote>\n<p>any 타입을 지양해야 하는 이유는 다음과 같다.</p>\n<ul>\n<li>타입 안정성이 없다.</li>\n<li>함수 시그니처를 무시한다.</li>\n<li>언어 서비스가 적용되지 않는다.</li>\n<li>코드 리팩터링 때 버그를 감춘다.</li>\n<li>타입 설계를 감춘다.</li>\n<li>타입 시스템의 떨어뜨린다.</li>\n</ul>","rawMarkdownBody":"# 테스트 글 입니다.\n\n# 아이템 1 타입스크립트와 자바스크립트의 관계 이해하기\n\n>타입스크립트는 자바스크립트의 상위 집합이다.\n>모든 자바스크립트 프로그램은 이미 타입스크립트 프로그램이다.\n>반대로 타입스크립트는 별도의 문법을 가지고 있기 때문에 유효한 자바스크립트 프로그램이 아니다.\n\nmain.js 를 main.ts 로 바꾼다고 해서 달라지는 것은 없다.\n하지만 그 반대의 경우는 성립하지 않는다.\n\n>타입스크립트는 런타임 오류를 발생시키는 코드를 찾아내려고 한다.\n>그러나 모든 오류를 찾아내리라 기대하면 안된다.\n>타입 체커를 통과하면서도 런타입 오류를 발생시키는 코드는 충분히 존재할 수 있다.\n\n>타입스크립트 타입 시스템은 전반적으로 자바스크립트 동작을 모델링한다.\n>그러나 잘못된 매개변수 개수로 함수를 호출하는 경우처럼,\n>자바스크립트에서는 허용되지만 타입스크립트에서는 문제가 되는 경우도 있다.\n>이러한 문법의 엄격함은 온전히 취향 차이이며 우열을 가릴 수 없는 문제다.\n\n```typescript\nconst x = 2 + '3' // OK, type is string  \nconst y = '2' + 3 // OK, type is string\n```\n\n#타입체커 는 정상으로 본다.\n\n```typescript\nconst a = null + 7 // Evaluates to 7 in JS  \n// ~~~~ Operator '+' cannot be applied to types ...  \nconst b = [] + 12 // Evaluates to '12' in JS  \n// ~~~~~~~ Operator '+' cannot be applied to types ...  \nalert('Hello', 'TypeScript') // alerts \"Hello\"  \n// ~~~~~~~~~~~~ Expected 0-1 arguments, but got 2  \n```\n\n반대로 위 예제는 오류를 표시한다.\n런타임 오류가 발생하지 않지만, 타입 체커는 문제점을 표시한다.\n\n# 아이템 2 타입스크립트 설정 이해하기\n\n>타입스크립트 설정은 커맨드라인보다는 `tsconfig.json`을 사용하자.\n\n>자바스크립트 > 타입스크립트로 전환하는게 아니라면 `noImplicitAny` 를 설정하자.\n\n>`noImplicitAny`, `strictNullChecks`, `strict`를 설정하는 것이 좋다.\n\n# 아이템 3 코드 생성과 타입이 관계없음을 이해하기\n\n>코드 생성은 타입 시스템과 무관하다.\n>타입스크립트 타입은 런타임 동작이나 성능에 영향을 주지 않는다.\n\n타입스크립트 컴파일러는 두 가지 역할을 수행한다.\n- 최신 타입스크립트/자바스크립트를 브라우저에서 동작할 수 있도록 구버전의 자바스크립트로 트랜스파일(transfile)\n- 코드의 타입 오류를 체크\n\n>타입 오류가 존재하더라도 코드 생성(컴파일)은 가능하다.\n\n```typescript\nlet x = 'hello'  \nx = 1234  // '1234' 형식은 'string' 형식에 할당할 수 없습니다.\n```\n\n타입 오류가 발생해도 컴파일 된다.\n\n>타입스크립트 타입은 런타임에 사용할 수 없다.\n>런타임에 타입을 지정하려면, 타입 정보 유지를 위한 별도의 방법이 필요하다.\n\n1. height 속성이 존재하는지 체크\n\n```typescript\ninterface Square {  \n  width: number  \n}  \ninterface Rectangle extends Square {  \n  height: number  \n}  \ntype Shape = Square | Rectangle  \nfunction calculateArea(shape: Shape) {  \n  if ('height' in shape) {  \n    shape // Type is Rectangle  \n    return shape.width * shape.height  \n  } else {  \n    shape // Type is Square  \n    return shape.width * shape.width  \n  }  \n}\n```\n\n2. \b접근 가능한 타입 정보를 명시적으로 저장하는 '태그' 기법\n\n```typescript\ninterface Square {  \n  kind: 'square'  \n  width: number  \n}  \ninterface Rectangle {  \n  kind: 'rectangle'  \n  height: number  \n  width: number  \n}  \ntype Shape = Square | Rectangle   // 태그된 유니온(tagged union)\n  \nfunction calculateArea(shape: Shape) {  \n  if (shape.kind === 'rectangle') {  \n    shape // Type is Rectangle  \n    return shape.width * shape.height  \n  } else {  \n    shape // Type is Square  \n    return shape.width * shape.width  \n  }  \n}\n```\n\n3. \b타입을 클래스로 만드는 방법\n\n```typescript\nclass Square {  \n  constructor(public width: number) {}  \n}  \nclass Rectangle extends Square {  \n  constructor(public width: number, public height: number) {  \n    super(width)  \n  }  \n}  \ntype Shape = Square | Rectangle  // Rectangle은 타입으로 참조\n  \nfunction calculateArea(shape: Shape) {  \n  if (shape instanceof Rectangle) {  // 값으로 참조\n    shape // Type is Rectangle  \n    return shape.width * shape.height  \n  } else {  \n    shape // Type is Square  \n    return shape.width * shape.width // OK  \n  }  \n}\n```\n\n# 아이템 4 구조적 타이핑에 익숙해지기\n\n>자바스크립트가 덕 타이핑 기반이고 타입스크립트가 이를 모델링하기 위해 구조적 타이핑을 사용함을 이해해야 한다.\n\n자바스크립트는 런타임에 타입을 체크하고,\n타입스크립트는 컴파일 타입에 구조에 기반하여 타입을 체크한다.\n\n>클래스 역시 구조적 타이핑 규칙을 따른다.\n\n```typescript\nclass C {  \n  foo: string  \n  constructor(foo: string) {  \n    this.foo = foo  \n  }  \n}  \n// 클래스를 값으로 사용\nconst c = new C('instance of C')\n// 클래스를 타입으로 사용\nconst d: C = { foo: 'object literal' } // OK!   \n```\n\n>구조적 타이핑을 사용하면 유닛 테스팅을 손쉽게 할 수 있다.\n\n예를 들어 PostgressDB가 DB 인터페이스를 구현하는지 명확히 선언할 필요가 없다.\n\n```typescript\ninterface PostgresDB {  \n  runQuery: (sql: string) => any[]  \n}  \ninterface Author {  \n  first: string  \n  last: string  \n}  \ninterface DB {  \n  runQuery: (sql: string) => any[]  \n}  \nfunction getAuthors(database: DB): Author[] {  \n  const authorRows = database.runQuery(`SELECT FIRST, LAST FROM AUTHORS`)  \n  return authorRows.map(row => ({ first: row[0], last: row[1] }))  \n}\n```\n\n```typescript\ntest('getAuthors', () => {  \n  const authors = getAuthors({  \n    runQuery(sql: string) {  \n      return [  \n        ['Toni', 'Morrison'],  \n        ['Maya', 'Angelou'],  \n      ]  \n    },  \n  })  \n  expect(authors).toEqual([  \n    { first: 'Toni', last: 'Morrison' },  \n    { first: 'Maya', last: 'Angelou' },  \n  ])  \n})\n```\n\n# 아이템 5 any 타입 지양하기\n\n>any 타입을 사용하면 타입 체커와 타입스크립트 언어 서비스를 무력화한다.\n>any 타입은 문제를 감추며, DX를 나쁘게하며, 타입 시스템의 신뢰도를 떨어뜨린다.\n\nany 타입을 지양해야 하는 이유는 다음과 같다.\n- 타입 안정성이 없다.\n- 함수 시그니처를 무시한다.\n- 언어 서비스가 적용되지 않는다.\n- 코드 리팩터링 때 버그를 감춘다.\n- 타입 설계를 감춘다.\n- 타입 시스템의 떨어뜨린다.\n","frontmatter":{"date":"2024.03.16","title":"테스트 글 첫 번째","stage":"main","categories":"TypeScript","description":"안녕하세요 첫 번째 글 입니다.","thumbnail":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#b8b8a8","images":{"fallback":{"src":"/static/96feee08446dde16fceb394ff2d00f68/e2537/img-1.jpg","srcSet":"/static/96feee08446dde16fceb394ff2d00f68/38177/img-1.jpg 200w,\n/static/96feee08446dde16fceb394ff2d00f68/18869/img-1.jpg 400w,\n/static/96feee08446dde16fceb394ff2d00f68/e2537/img-1.jpg 800w,\n/static/96feee08446dde16fceb394ff2d00f68/b691d/img-1.jpg 1600w","sizes":"(min-width: 800px) 800px, 100vw"},"sources":[{"srcSet":"/static/96feee08446dde16fceb394ff2d00f68/f9911/img-1.webp 200w,\n/static/96feee08446dde16fceb394ff2d00f68/3d164/img-1.webp 400w,\n/static/96feee08446dde16fceb394ff2d00f68/3d761/img-1.webp 800w,\n/static/96feee08446dde16fceb394ff2d00f68/be59a/img-1.webp 1600w","type":"image/webp","sizes":"(min-width: 800px) 800px, 100vw"}]},"width":800,"height":1200}}}},"fields":{"slug":"/2024/1","hashTag":["#타입체커"]},"tableOfContents":"<ul>\n<li><a href=\"#%ED%85%8C%EC%8A%A4%ED%8A%B8-%EA%B8%80-%EC%9E%85%EB%8B%88%EB%8B%A4\">테스트 글 입니다.</a></li>\n<li><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-1-%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%99%80-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EC%9D%98-%EA%B4%80%EA%B3%84-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\">아이템 1 타입스크립트와 자바스크립트의 관계 이해하기</a></li>\n<li><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-2-%ED%83%80%EC%9E%85%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%84%A4%EC%A0%95-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\">아이템 2 타입스크립트 설정 이해하기</a></li>\n<li><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-3-%EC%BD%94%EB%93%9C-%EC%83%9D%EC%84%B1%EA%B3%BC-%ED%83%80%EC%9E%85%EC%9D%B4-%EA%B4%80%EA%B3%84%EC%97%86%EC%9D%8C%EC%9D%84-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\">아이템 3 코드 생성과 타입이 관계없음을 이해하기</a></li>\n<li><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-4-%EA%B5%AC%EC%A1%B0%EC%A0%81-%ED%83%80%EC%9D%B4%ED%95%91%EC%97%90-%EC%9D%B5%EC%88%99%ED%95%B4%EC%A7%80%EA%B8%B0\">아이템 4 구조적 타이핑에 익숙해지기</a></li>\n<li><a href=\"#%EC%95%84%EC%9D%B4%ED%85%9C-5-any-%ED%83%80%EC%9E%85-%EC%A7%80%EC%96%91%ED%95%98%EA%B8%B0\">아이템 5 any 타입 지양하기</a></li>\n</ul>"},"prev":null,"next":{"id":"8441dc02-1ff2-5d69-a205-0ce79985e68d","rawMarkdownBody":"# 안녕하세요 테스트 글 입니다.\n\n## 테스트 글 입니다.\n\n### 테스트 글 입니다.\n\n#### 테스트 글 입니다.\n\n","frontmatter":{"date":"2024.03.16","title":"테스트 글 두 번째","stage":"sub","categories":"TypeScript"},"fields":{"slug":"/2024/2"}}},"pageContext":{"title":"테스트 글 첫 번째","slug":"/2024/1","nextSlug":"/2024/2","prevSlug":""}},"staticQueryHashes":["2945020240"],"slicesMap":{}}