{"componentChunkName":"component---src-templates-post-template-tsx","path":"/tips/2/","result":{"data":{"post":{"id":"be905e98-b0a8-571f-a8ea-7939d9ca7ce8","html":"<p>다음 코드는 인사말을 생성하는 #타입스크립트 #함수 이다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">// 인사말을 생성합니다. 결과는 보기 좋게 꾸며져요.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>title<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>함수의 앞부분에 주석이 있어서 어떤 #기능 을 하는지 쉽게 알 수는 있다.\n그러나 사용자를 위한 문서라면 #JSDoc #스타일 의 #주석 으로 만드는 것이 좋다.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token comment\">/**\n인사말을 생성합니다. 결과는 보기 좋게 꾸며져요.\n*/</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">greet</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>title<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>왜나하면 대부분의 편집기는 함수가 호출되는 곳에서 함수에 붙어있는 #JSDoc 스타일의 #주석 을 #툴팁 으로 표시해주기 때문이다.\n그러나 <strong>인라인 주석은 편집기가 표시해주지 않는다.</strong></p>\n<p>#언어서비스 가 JSDoc 스타일을 지원하기 때문에 적극적으로 활용하는 것이 좋다.</p>\n<p>만약 공개 API에 주석을 붙인다면 #JSDoc 형태로 작성해야 한다.</p>\n<p>#JSDoc 에는 @param 과 @returns 같은 일반적인 규칙을 사용할 수 있다.</p>\n<p>한편 타입스크립트 관점에서는 #TSDoc 이라고 부르기도 한다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">/**  \n * 인사말을 생성합니다.\n * @param name 인사할 사람의 이름\n * @param title 그 사람의 칭호\n * @returns 보기 좋은 형태의 인사말\n */</span><span class=\"token keyword\">function</span> <span class=\"token function\">greetFullTSDoc</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> title<span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token keyword\">return</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>title<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>타입 정의에 #TSDoc 을 사용할 수도 있다.</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Vector3D</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>  \n<span class=\"token comment\">/** 특정 시간과 장소에서 수행된 측정 */</span>  \n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">Measurement</span> <span class=\"token punctuation\">{</span>  \n  <span class=\"token comment\">/** 어디에서 측정되었나? */</span>  \n  position<span class=\"token operator\">:</span> Vector3D<span class=\"token punctuation\">;</span>  \n  <span class=\"token comment\">/** 언제 측정되었나? epoch에서부터 초 단위로 */</span>  \n  time<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>  \n  <span class=\"token comment\">/** 측정된 운동량 */</span>  \n  momentum<span class=\"token operator\">:</span> Vector3D<span class=\"token punctuation\">;</span>  \n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">Measurement</code> #객체 의 각 #필드 에 #마우스 를 올려보면 #필드 별로 설명을 볼 수 있다.</p>\n<p>#TSDoc 주석은 #마크다운 (markdown) 형식으로 꾸며지므로 굵은 글씨, 기울임, 목록을 사용할 수 있다.</p>\n<p>주석은 수필처럼 장황하게 쓰지 않도록 주의하도록 하자.\n훌륭한 주석은 간단히 요점만 언급한다.</p>\n<p>#JSDoc 에는 타입 정보를 명시하는 규칙 (@param {string} name …) 이 있지만,\n타입스크립트에서는 타입 정보가 코드에 있기 때문에\n#TSDoc 에서는<strong>타입 정보를 명시하면 안된다.</strong>\n[[아이템 30 문서에 타입 정보를 쓰지 않기]]</p>\n<h3 id=\"요약-1\" style=\"position:relative;\"><a href=\"#%EC%9A%94%EC%95%BD-1\" aria-label=\"요약 1 permalink\" class=\"post-toc before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요약 1</h3>\n<blockquote>\n<p>익스포트된 함수, #클래스, #타입 에 주석을 달 때는 JSDoc/TSDoc 형태를 사용하자.\nJSDoc/TSDoc 형태의 주석을 달면 편집기가 주석 정보를 표시해준다.</p>\n</blockquote>\n<h3 id=\"요약-2\" style=\"position:relative;\"><a href=\"#%EC%9A%94%EC%95%BD-2\" aria-label=\"요약 2 permalink\" class=\"post-toc before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요약 2</h3>\n<blockquote>\n<p>@param @returns 구문과 문서 서식을 위해 마크다운을 사용할 수 있다.</p>\n</blockquote>\n<h3 id=\"요약-3\" style=\"position:relative;\"><a href=\"#%EC%9A%94%EC%95%BD-3\" aria-label=\"요약 3 permalink\" class=\"post-toc before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>요약 3</h3>\n<blockquote>\n<p>주석에 타입 정보를 포함하면 안된다.</p>\n</blockquote>","rawMarkdownBody":"\n다음 코드는 인사말을 생성하는 #타입스크립트 #함수 이다.\n\n```typescript\n// 인사말을 생성합니다. 결과는 보기 좋게 꾸며져요.\nfunction greet(name: string, title: string) {  \n  return `Hello ${title} ${name}`  \n}\n```\n\n함수의 앞부분에 주석이 있어서 어떤 #기능 을 하는지 쉽게 알 수는 있다.\n그러나 사용자를 위한 문서라면 #JSDoc #스타일 의 #주석 으로 만드는 것이 좋다.\n\n```typescript\n/**\n인사말을 생성합니다. 결과는 보기 좋게 꾸며져요.\n*/\nfunction greet(name: string, title: string) {  \n  return `Hello ${title} ${name}`  \n}\n```\n\n왜나하면 대부분의 편집기는 함수가 호출되는 곳에서 함수에 붙어있는 #JSDoc 스타일의 #주석 을 #툴팁 으로 표시해주기 때문이다.\n그러나 **인라인 주석은 편집기가 표시해주지 않는다.**\n\n#언어서비스 가 JSDoc 스타일을 지원하기 때문에 적극적으로 활용하는 것이 좋다.\n\n만약 공개 API에 주석을 붙인다면 #JSDoc 형태로 작성해야 한다.\n\n#JSDoc 에는 @param 과 @returns 같은 일반적인 규칙을 사용할 수 있다.\n\n한편 타입스크립트 관점에서는 #TSDoc 이라고 부르기도 한다.\n\n```ts\n/**  \n * 인사말을 생성합니다.\n * @param name 인사할 사람의 이름\n * @param title 그 사람의 칭호\n * @returns 보기 좋은 형태의 인사말\n */function greetFullTSDoc(name: string, title: string) {  \n  return `Hello ${title} ${name}`  \n}\n```\n\n타입 정의에 #TSDoc 을 사용할 수도 있다.\n\n```ts\ninterface Vector3D {}  \n/** 특정 시간과 장소에서 수행된 측정 */  \ninterface Measurement {  \n  /** 어디에서 측정되었나? */  \n  position: Vector3D;  \n  /** 언제 측정되었나? epoch에서부터 초 단위로 */  \n  time: number;  \n  /** 측정된 운동량 */  \n  momentum: Vector3D;  \n}\n```\n\n`Measurement` #객체 의 각 #필드 에 #마우스 를 올려보면 #필드 별로 설명을 볼 수 있다.\n\n#TSDoc 주석은 #마크다운 (markdown) 형식으로 꾸며지므로 굵은 글씨, 기울임, 목록을 사용할 수 있다.\n\n주석은 수필처럼 장황하게 쓰지 않도록 주의하도록 하자.\n훌륭한 주석은 간단히 요점만 언급한다.\n\n#JSDoc 에는 타입 정보를 명시하는 규칙 (@param {string} name ...) 이 있지만,\n타입스크립트에서는 타입 정보가 코드에 있기 때문에\n#TSDoc 에서는**타입 정보를 명시하면 안된다.**\n[[아이템 30 문서에 타입 정보를 쓰지 않기]]\n\n### 요약 1\n>익스포트된 함수, #클래스, #타입 에 주석을 달 때는 JSDoc/TSDoc 형태를 사용하자.\n>JSDoc/TSDoc 형태의 주석을 달면 편집기가 주석 정보를 표시해준다.\n### 요약 2\n>@param @returns 구문과 문서 서식을 위해 마크다운을 사용할 수 있다.\n### 요약 3\n>주석에 타입 정보를 포함하면 안된다.\n\n\n\n","frontmatter":{"date":"2023.12.08","title":"Test","tags":["hyunseo","blog"],"stage":"sub","categories":"TypeScript","description":"설명란","thumbnail":null},"fields":{"slug":"/tips/2","hashTag":["#타입스크립트","#함수","#기능","#JSDoc","#스타일","#주석","#툴팁","#언어서비스","#TSDoc","#객체","#필드","#마우스","#마크다운","#클래스","#타입"]},"tableOfContents":"<ul>\n<li><a href=\"#%EC%9A%94%EC%95%BD-1\">요약 1</a></li>\n<li><a href=\"#%EC%9A%94%EC%95%BD-2\">요약 2</a></li>\n<li><a href=\"#%EC%9A%94%EC%95%BD-3\">요약 3</a></li>\n</ul>"},"prev":{"id":"04db0734-feb5-55b0-99fa-9e086953e5d1","rawMarkdownBody":"heelo","frontmatter":{"date":"2024.03.15","title":"빠르게 성장하는 회사들의 데일리스크럼 문화 뜯어보기 - 팀스파르타","tags":["언어서비스","객체","마우스"],"stage":"main","categories":"TypeScript"},"fields":{"slug":"/tips/5"}},"next":{"id":"1713a8e9-7537-517e-915d-7a2d1f3d185c","rawMarkdownBody":"#함수 ㅎㅎ\n# 아이템 1 타입스크립트와 자바스크립트의 관계 이해하기\n\n>타입스크립트는 자바스크립트의 상위 집합이다.\n>모든 자바스크립트 프로그램은 이미 타입스크립트 프로그램이다.\n>반대로 타입스크립트는 별도의 문법을 가지고 있기 때문에 유효한 자바스크립트 프로그램이 아니다.\n\nmain.js 를 main.ts 로 바꾼다고 해서 달라지는 것은 없다.\n하지만 그 반대의 경우는 성립하지 않는다.\n\n>타입스크립트는 런타임 오류를 발생시키는 코드를 찾아내려고 한다.\n>그러나 모든 오류를 찾아내리라 기대하면 안된다.\n>타입 체커를 통과하면서도 런타입 오류를 발생시키는 코드는 충분히 존재할 수 있다.\n\n>타입스크립트 타입 시스템은 전반적으로 자바스크립트 동작을 모델링한다.\n>그러나 잘못된 매개변수 개수로 함수를 호출하는 경우처럼,\n>자바스크립트에서는 허용되지만 타입스크립트에서는 문제가 되는 경우도 있다.\n>이러한 문법의 엄격함은 온전히 취향 차이이며 우열을 가릴 수 없는 문제다.\n\n```typescript\nconst x = 2 + '3' // OK, type is string  \nconst y = '2' + 3 // OK, type is string\n```\n\n#타입체커 는 정상으로 본다.\n\n```typescript\nconst a = null + 7 // Evaluates to 7 in JS  \n// ~~~~ Operator '+' cannot be applied to types ...  \nconst b = [] + 12 // Evaluates to '12' in JS  \n// ~~~~~~~ Operator '+' cannot be applied to types ...  \nalert('Hello', 'TypeScript') // alerts \"Hello\"  \n// ~~~~~~~~~~~~ Expected 0-1 arguments, but got 2  \n```\n\n반대로 위 예제는 오류를 표시한다.\n런타임 오류가 발생하지 않지만, 타입 체커는 문제점을 표시한다.\n\n# 아이템 2 타입스크립트 설정 이해하기\n\n>타입스크립트 설정은 커맨드라인보다는 `tsconfig.json`을 사용하자.\n\n>자바스크립트 > 타입스크립트로 전환하는게 아니라면 `noImplicitAny` 를 설정하자.\n\n>`noImplicitAny`, `strictNullChecks`, `strict`를 설정하는 것이 좋다.\n\n# 아이템 3 코드 생성과 타입이 관계없음을 이해하기\n\n>코드 생성은 타입 시스템과 무관하다.\n>타입스크립트 타입은 런타임 동작이나 성능에 영향을 주지 않는다.\n\n타입스크립트 컴파일러는 두 가지 역할을 수행한다.\n- 최신 타입스크립트/자바스크립트를 브라우저에서 동작할 수 있도록 구버전의 자바스크립트로 트랜스파일(transfile)\n- 코드의 타입 오류를 체크\n\n>타입 오류가 존재하더라도 코드 생성(컴파일)은 가능하다.\n\n```typescript\nlet x = 'hello'  \nx = 1234  // '1234' 형식은 'string' 형식에 할당할 수 없습니다.\n```\n\n타입 오류가 발생해도 컴파일 된다.\n\n>타입스크립트 타입은 런타임에 사용할 수 없다.\n>런타임에 타입을 지정하려면, 타입 정보 유지를 위한 별도의 방법이 필요하다.\n\n1. height 속성이 존재하는지 체크\n\n```typescript\ninterface Square {  \n  width: number  \n}  \ninterface Rectangle extends Square {  \n  height: number  \n}  \ntype Shape = Square | Rectangle  \nfunction calculateArea(shape: Shape) {  \n  if ('height' in shape) {  \n    shape // Type is Rectangle  \n    return shape.width * shape.height  \n  } else {  \n    shape // Type is Square  \n    return shape.width * shape.width  \n  }  \n}\n```\n\n2. \b접근 가능한 타입 정보를 명시적으로 저장하는 '태그' 기법\n\n```typescript\ninterface Square {  \n  kind: 'square'  \n  width: number  \n}  \ninterface Rectangle {  \n  kind: 'rectangle'  \n  height: number  \n  width: number  \n}  \ntype Shape = Square | Rectangle   // 태그된 유니온(tagged union)\n  \nfunction calculateArea(shape: Shape) {  \n  if (shape.kind === 'rectangle') {  \n    shape // Type is Rectangle  \n    return shape.width * shape.height  \n  } else {  \n    shape // Type is Square  \n    return shape.width * shape.width  \n  }  \n}\n```\n\n3. \b타입을 클래스로 만드는 방법\n\n```typescript\nclass Square {  \n  constructor(public width: number) {}  \n}  \nclass Rectangle extends Square {  \n  constructor(public width: number, public height: number) {  \n    super(width)  \n  }  \n}  \ntype Shape = Square | Rectangle  // Rectangle은 타입으로 참조\n  \nfunction calculateArea(shape: Shape) {  \n  if (shape instanceof Rectangle) {  // 값으로 참조\n    shape // Type is Rectangle  \n    return shape.width * shape.height  \n  } else {  \n    shape // Type is Square  \n    return shape.width * shape.width // OK  \n  }  \n}\n```\n\n# 아이템 4 구조적 타이핑에 익숙해지기\n\n>자바스크립트가 덕 타이핑 기반이고 타입스크립트가 이를 모델링하기 위해 구조적 타이핑을 사용함을 이해해야 한다.\n\n자바스크립트는 런타임에 타입을 체크하고,\n타입스크립트는 컴파일 타입에 구조에 기반하여 타입을 체크한다.\n\n>클래스 역시 구조적 타이핑 규칙을 따른다.\n\n```typescript\nclass C {  \n  foo: string  \n  constructor(foo: string) {  \n    this.foo = foo  \n  }  \n}  \n// 클래스를 값으로 사용\nconst c = new C('instance of C')\n// 클래스를 타입으로 사용\nconst d: C = { foo: 'object literal' } // OK!   \n```\n\n>구조적 타이핑을 사용하면 유닛 테스팅을 손쉽게 할 수 있다.\n\n예를 들어 PostgressDB가 DB 인터페이스를 구현하는지 명확히 선언할 필요가 없다.\n\n```typescript\ninterface PostgresDB {  \n  runQuery: (sql: string) => any[]  \n}  \ninterface Author {  \n  first: string  \n  last: string  \n}  \ninterface DB {  \n  runQuery: (sql: string) => any[]  \n}  \nfunction getAuthors(database: DB): Author[] {  \n  const authorRows = database.runQuery(`SELECT FIRST, LAST FROM AUTHORS`)  \n  return authorRows.map(row => ({ first: row[0], last: row[1] }))  \n}\n```\n\n```typescript\ntest('getAuthors', () => {  \n  const authors = getAuthors({  \n    runQuery(sql: string) {  \n      return [  \n        ['Toni', 'Morrison'],  \n        ['Maya', 'Angelou'],  \n      ]  \n    },  \n  })  \n  expect(authors).toEqual([  \n    { first: 'Toni', last: 'Morrison' },  \n    { first: 'Maya', last: 'Angelou' },  \n  ])  \n})\n```\n\n# 아이템 5 any 타입 지양하기\n\n>any 타입을 사용하면 타입 체커와 타입스크립트 언어 서비스를 무력화한다.\n>any 타입은 문제를 감추며, DX를 나쁘게하며, 타입 시스템의 신뢰도를 떨어뜨린다.\n\nany 타입을 지양해야 하는 이유는 다음과 같다.\n- 타입 안정성이 없다.\n- 함수 시그니처를 무시한다.\n- 언어 서비스가 적용되지 않는다.\n- 코드 리팩터링 때 버그를 감춘다.\n- 타입 설계를 감춘다.\n- 타입 시스템의 떨어뜨린다.\n","frontmatter":{"date":"2023.11.19","title":"📖 EffectiveTypeScript 01~05","tags":["wow","pl"],"stage":"main","categories":"TypeScript"},"fields":{"slug":"/tips/4"}}},"pageContext":{"title":"Test","slug":"/tips/2","nextSlug":"/tips/4","prevSlug":"/tips/5"}},"staticQueryHashes":["2945020240"],"slicesMap":{}}