{"version":3,"file":"52c4c00dd3ae5a49c41e13c1c786f2ae6f65c10e-15117448f320fcd8e763.js","mappings":"kOAKO,MAAMA,GAASC,EAAAA,EAAAA,GAAA,OAAAC,OAAA,aAAAD,CAAA,uDAIPE,EAAAA,EAAK,OAGPC,GAAOH,EAAAA,EAAAA,GAAA,OAAAC,OAAA,aAAAD,CAAA,mGAQPI,EAAAA,GAAqB,4BAKrBC,GAAYL,EAAAA,EAAAA,GAAOM,EAAAA,EAAW,CAAAL,OAAA,aAAlBD,CAAmB,sEAK/BI,EAAAA,GAAqB,iBAKrBG,GAAWP,EAAAA,EAAAA,GAAA,OAAAC,OAAA,aAAAD,CAAA,CAAAQ,KAAA,SAAAC,OAAA,iFAQXC,GAAKV,EAAAA,EAAAA,GAAA,KAAAC,OAAA,aAAAD,CAAA,CAAAQ,KAAA,SAAAC,OAAA,yEAOLE,GAAWX,EAAAA,EAAAA,GAAA,KAAAC,OAAA,aAAAD,CAAA,CAAAQ,KAAA,SAAAC,OAAA,oCAKXG,GAAGZ,EAAAA,EAAAA,GAAA,OAAAC,OAAA,aAAAD,CAAA,CAAAQ,KAAA,UAAAC,OAAA,oEAKHI,GAAIb,EAAAA,EAAAA,GAAA,KAAAC,OAAA,aAAAD,CAAA,CAAAQ,KAAA,SAAAC,OAAA,8FAOJK,GAAId,EAAAA,EAAAA,GAAA,KAAAC,OAAA,aAAAD,CAAA,CAAAQ,KAAA,SAAAC,OAAA,sD,wBC1DV,MAAMM,EAAWC,IAAgC,IAA/B,KAAEC,GAAuBD,EAC9C,MAAME,EAAaD,EAAKE,KAAKC,OAAOC,SAAWJ,EAAKE,KAAKC,OAAOC,QAAQC,OAAS,EACjF,OACIC,EAAAA,EAAAA,KAACC,EAAAA,KAAI,CAACC,GAAIR,EAAKE,KAAKC,OAAOM,KAAMC,MAAO,CAAEC,MAAO,UAC7CL,EAAAA,EAAAA,KAACM,EAAS,KAC+B,OAApCZ,EAAKE,KAAKW,YAAYC,YACnBR,EAAAA,EAAAA,KAACM,EAAW,CACRG,IAAKf,EAAKE,KAAKc,GACfC,MAAOjB,EAAKE,KAAKW,YAAYC,UAAUI,gBAAgBC,gBACvDC,WAAW,KAGnBd,EAAAA,EAAAA,KAACM,EAAa,MACVN,EAAAA,EAAAA,KAACM,EAAO,KAAEZ,EAAKE,KAAKW,YAAYQ,QAChCf,EAAAA,EAAAA,KAACM,EAAa,KAAEZ,EAAKE,KAAKW,YAAYS,cACtChB,EAAAA,EAAAA,KAACM,EAAK,MACFN,EAAAA,EAAAA,KAACM,EAAM,KACFZ,EAAKE,KAAKW,YAAYU,WACtBtB,EAAa,MAAQD,EAAKE,KAAKC,OAAOC,QAAQoB,KAAK,MAAQ,OAEhElB,EAAAA,EAAAA,KAACM,EAAM,KAAEZ,EAAKE,KAAKW,YAAYY,SAIxC,EAaf,MATkBC,IAAuB,IAAtB,MAAEC,GAAcD,EAC/B,OACIpB,EAAAA,EAAAA,KAACM,EAAW,KACPe,EAAMC,KAAI5B,IACPM,EAAAA,EAAAA,KAACR,EAAQ,CAACE,KAAMA,EAAM6B,IAAK7B,EAAKE,KAAKc,OAE/B,C","sources":["webpack://vespucci95.github.io/./src/components/MainPost/styled.ts","webpack://vespucci95.github.io/./src/components/MainPost/index.tsx"],"sourcesContent":["import styled from '@emotion/styled';\nimport { GatsbyImage } from 'gatsby-plugin-image';\nimport { INNER } from '@/constants';\nimport { MEDIA_QUERY_MAX_WIDTH } from '@/styles/Theme';\n\nexport const Container = styled.div`\n    display: flex;\n    flex-direction: column;\n    gap: 42px;\n    padding: ${INNER}px;\n`;\n\nexport const Wrapper = styled.div`\n    display: flex;\n    gap: 18px;\n    cursor: pointer;\n    transition: all 0.2s;\n    &:hover {\n        transform: scale(1.015);\n    }\n    @media ${MEDIA_QUERY_MAX_WIDTH} {\n        flex-direction: column;\n    }\n`;\n\nexport const Thumbnail = styled(GatsbyImage)`\n    border-radius: 10px;\n    width: 190px;\n    min-width: 190px;\n    height: 170px;\n    @media ${MEDIA_QUERY_MAX_WIDTH} {\n        width: 100%;\n    }\n`;\n\nexport const PostContent = styled.div`\n    display: flex;\n    width: 100%;\n    gap: 6px;\n    flex-direction: column;\n    justify-content: center;\n`;\n\nexport const Title = styled.p`\n    margin-bottom: 10px;\n    font-size: 1.25em;\n    font-weight: 300;\n    line-height: 1.14;\n`;\n\nexport const Description = styled.p`\n    font-size: 0.875em;\n    color: #939393;\n`;\n\nexport const Row = styled.div`\n    display: flex;\n    align-items: flex-end;\n    justify-content: space-between;\n`;\nexport const Info = styled.p`\n    overflow: hidden;\n    white-space: nowrap;\n    font-size: 0.875em;\n    color: #939393;\n    text-overflow: ellipsis;\n`;\nexport const Date = styled.p`\n    white-space: nowrap;\n    font-size: 0.75em;\n    color: #939393;\n`;\n","import React from 'react';\nimport { Edges } from 'GatsbyGraphQL';\nimport * as S from './styled';\nimport { Link } from 'gatsby';\n\ntype Props = {\n    edges: Edges[];\n};\n\nexport const MainPost = ({ edge }: { edge: Edges }) => {\n    const hasHashTag = edge.node.fields.hashTag && edge.node.fields.hashTag.length > 0;\n    return (\n        <Link to={edge.node.fields.slug} style={{ width: '100%' }}>\n            <S.Wrapper>\n                {edge.node.frontmatter.thumbnail !== null && (\n                    <S.Thumbnail\n                        alt={edge.node.id}\n                        image={edge.node.frontmatter.thumbnail.childImageSharp.gatsbyImageData}\n                        draggable={false}\n                    />\n                )}\n                <S.PostContent>\n                    <S.Title>{edge.node.frontmatter.title}</S.Title>\n                    <S.Description>{edge.node.frontmatter.description}</S.Description>\n                    <S.Row>\n                        <S.Info>\n                            {edge.node.frontmatter.categories}\n                            {hasHashTag ? ' âˆ£ ' + edge.node.fields.hashTag.join(', ') : null}\n                        </S.Info>\n                        <S.Date>{edge.node.frontmatter.date}</S.Date>\n                    </S.Row>\n                </S.PostContent>\n            </S.Wrapper>\n        </Link>\n    );\n};\n\nconst MainPosts = ({ edges }: Props) => {\n    return (\n        <S.Container>\n            {edges.map(edge => (\n                <MainPost edge={edge} key={edge.node.id} />\n            ))}\n        </S.Container>\n    );\n};\nexport default MainPosts;\n"],"names":["Container","_styled","target","INNER","Wrapper","MEDIA_QUERY_MAX_WIDTH","Thumbnail","GatsbyImage","PostContent","name","styles","Title","Description","Row","Info","Date","MainPost","_ref","edge","hasHashTag","node","fields","hashTag","length","___EmotionJSX","Link","to","slug","style","width","S","frontmatter","thumbnail","alt","id","image","childImageSharp","gatsbyImageData","draggable","title","description","categories","join","date","_ref2","edges","map","key"],"sourceRoot":""}